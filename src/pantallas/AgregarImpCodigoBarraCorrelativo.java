/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pantallas;

import conexion.Conexion;
import entidades.Contrato;
import entidades.CuotaImpuesto;
import entidades.Cuotas;
import entidades.Impuesto;
import gestores.GestoresContrato;
import gestores.GestoresImpuestos;
import gestores.fechas;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import static pantallas.ImpuestoCompartido.lblIdImpuestoCompartido;
import static pantallas.LiquidacionInquilino.lblPeriodo;
import javax.swing.InputMap;
import javax.swing.KeyStroke;
import java.awt.event.KeyAdapter;
import javax.swing.JButton;

/**
 *
 * @author Nahuel
 */
public class AgregarImpCodigoBarraCorrelativo extends javax.swing.JFrame {

    /**
     * Creates new form AgregarImpuestos
     */
    public AgregarImpCodigoBarraCorrelativo() {
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblCom = new javax.swing.JLabel();
        codBarra = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblImporte = new javax.swing.JTextField();
        lblPeriodo = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        lblNumClie = new javax.swing.JLabel();
        lblImp = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        lblVencimiento = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Agregar Impuesto");
        setIconImage(getIconImage());
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jButton2.setText("Cargar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Impuesto: ");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Importe:");

        lblCom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        codBarra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codBarraActionPerformed(evt);
            }
        });
        codBarra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codBarraKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                codBarraKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Numero Cliente:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Codigo de Barra: ");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Vencimiento:");

        lblImporte.setEnabled(false);
        lblImporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblImporteActionPerformed(evt);
            }
        });
        lblImporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lblImporteKeyTyped(evt);
            }
        });

        lblPeriodo.setEnabled(false);
        lblPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblPeriodoActionPerformed(evt);
            }
        });
        lblPeriodo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblPeriodoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lblPeriodoKeyTyped(evt);
            }
        });

        jButton3.setText("Siguiente");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lblNumClie.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblImp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton4.setText("Atras");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        lblVencimiento.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCom, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel1))
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNumClie)
                                .addComponent(lblImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblImp)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblVencimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codBarra, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codBarra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblNumClie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCom, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblImp))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPeriodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVencimiento))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowGainedFocus
    public void keyPressed(KeyEvent e){
                if(e.getKeyCode()==KeyEvent.VK_ENTER){
                      JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Impuesto"+e.toString());
                }
                if(e.getKeyCode()==KeyEvent.VK_ESCAPE){
                    System.exit(0);
                }
            }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String descripcion=(String) lblImp.getText();
            try{
            int r=0;  
            String sql2="SELECT * FROM `impuesto`ORDER BY idImpuesto DESC LIMIT 1";
            ResultSet rs2=null;
            try{
                PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sql2);
                rs2=pst2.executeQuery();            
                while(rs2.next()){
                     idImpuesto=Integer.parseInt(rs2.getString("idImpuesto"))+1;
                }
            }catch (SQLException e) {
                JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Impuesto"+e.toString());
            }
            Contrato contrato=new Contrato();
            Cuotas cuotas=new Cuotas();
            CuotaImpuesto cuotaImp=new CuotaImpuesto();
            Impuesto impuesto=new Impuesto();

            contrato.setIdContrato(idCon);
            cuotas.setContrato(contrato);
            cuotas.setNroCuota(canmes);        
            impuesto.setIdImpuesto(idImpuesto);
            impuesto.setIdDescripcion(idDesc);
            impuesto.setValor(Double.parseDouble(lblImporte.getText()));
            impuesto.setCodigoBarra(codBarra.getText());
            impuesto.setPagado(0);
            cuotaImp.setCuotas(cuotas);
            cuotaImp.setImpuesto(impuesto);

            try {
                lblCom.setText(GestoresImpuestos.TraerImpuestoCompartido(idCon, idDesc));
            } catch (SQLException ex) {
                Logger.getLogger(DetallesContrato.class.getName()).log(Level.SEVERE, null, ex);
            }    
            if(lblCom.getText().isEmpty()){
                GestoresImpuestos gestorImp=new GestoresImpuestos();
                GestoresContrato gestorCon=new GestoresContrato();
                r=gestorImp.GestorAltaImpuesto(cuotaImp);
                try {
                    int rr=gestorImp.ActualizarTotalImpuesto(idCon, canmes);

                    int actualizarTotal=gestorCon.ActualizarTotalaPagar(idCon, canmes);
                } catch (SQLException ex) {
                    Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                Object[] opciones = {"Cargar impuesto compartido", "Cancelar"};
                int eleccion = JOptionPane.showOptionDialog(null, "El impuesto "+ descripcion+ " es compartido","Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE, null, opciones, "Cancelar");
                if (eleccion == JOptionPane.YES_OPTION) {
                    int x=GestoresImpuestos.ultimoIdImpuestoCompartido()+1;
                    String idImp= Integer.toString(x);
                    ImpuestoCompartido impcom = new ImpuestoCompartido();
                    ImpuestoCompartido.lblDescripcion.setText(descripcion);
                    ImpuestoCompartido.importe.setText(lblImporte.getText());
                    ImpuestoCompartido.idPeriodo.setText(actual);
                    ImpuestoCompartido.nroCuota=nroCuota;
                    ImpuestoCompartido.bandera=1;
                    ImpuestoCompartido.idcon=idCon;
                    ImpuestoCompartido.iddes = idDesc;
                    impcom.setLocationRelativeTo(null);
                    impcom.setVisible(true); 
                    dispose();  
                }   
            }
            if(r==1){
                JOptionPane.showMessageDialog(new JDialog(),"Agregado Correctamente");
               
                int num= Integer.parseInt(lblNumClie.getText());
                String sql23="SELECT * FROM contrato " +
                             "WHERE `numeroSeguimiento`>"+num+
                             " ORDER BY numeroSeguimiento LIMIT 1;";
                ResultSet rs23=null;
            try{
                PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sql23);
                rs2=pst2.executeQuery();            
            while(rs2.next()){
                 int numcli=(rs2.getInt("numeroSeguimiento"));
                 lblNumClie.setText(String.valueOf(numcli));
                 lblImporte.setText("");
                 codBarra.setText("");
                 lblPeriodo.setText("");
            }
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Numero Seguimiento"+e.toString());
        }   
            }
            }catch(NumberFormatException ex){

                JOptionPane.showMessageDialog(new JDialog(),"Inserte un Valor");

            }
//        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
   
    private void cargar(KeyEvent evt){

            String descripcion=(String) lblImp.getText();
                try{
                int r=0;  
                String sql2="SELECT * FROM `impuesto`ORDER BY idImpuesto DESC LIMIT 1";
                ResultSet rs2=null;
                try{
                    PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sql2);
                    rs2=pst2.executeQuery();            
                    while(rs2.next()){
                         idImpuesto=Integer.parseInt(rs2.getString("idImpuesto"))+1;
                    }
                }catch (SQLException e) {
                    JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Impuesto"+e.toString());
                }
                Contrato contrato=new Contrato();
                Cuotas cuotas=new Cuotas();
                CuotaImpuesto cuotaImp=new CuotaImpuesto();
                Impuesto impuesto=new Impuesto();

                contrato.setIdContrato(idCon);
                cuotas.setContrato(contrato);
                cuotas.setNroCuota(canmes);        
                impuesto.setIdImpuesto(idImpuesto);
                impuesto.setIdDescripcion(idDesc);
                impuesto.setValor(Double.parseDouble(lblImporte.getText()));
                cuotaImp.setCuotas(cuotas);
                cuotaImp.setImpuesto(impuesto);

                try {
                    lblCom.setText(GestoresImpuestos.TraerImpuestoCompartido(idCon, idDesc));
                } catch (SQLException ex) {
                    Logger.getLogger(DetallesContrato.class.getName()).log(Level.SEVERE, null, ex);
                }    
                if(lblCom.getText().isEmpty()){
                    GestoresImpuestos gestorImp=new GestoresImpuestos();
                    GestoresContrato gestorCon=new GestoresContrato();
                    r=gestorImp.GestorAltaImpuesto(cuotaImp);
                    try {
                        int rr=gestorImp.ActualizarTotalImpuesto(idCon, canmes);

                        int actualizarTotal=gestorCon.ActualizarTotalaPagar(idCon, canmes);
                    } catch (SQLException ex) {
                        Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else{
                    Object[] opciones = {"Cargar impuesto compartido", "Cancelar"};
                    int eleccion = JOptionPane.showOptionDialog(null, "El impuesto "+ descripcion+ " es compartido","Mensaje de Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE, null, opciones, "Cancelar");
                    if (eleccion == JOptionPane.YES_OPTION) {
                        int x=GestoresImpuestos.ultimoIdImpuestoCompartido()+1;
                        String idImp= Integer.toString(x);
                        ImpuestoCompartido impcom = new ImpuestoCompartido();
                        ImpuestoCompartido.lblDescripcion.setText(descripcion);
                        ImpuestoCompartido.importe.setText(lblImporte.getText());
                        ImpuestoCompartido.idPeriodo.setText(actual);
                        ImpuestoCompartido.nroCuota=nroCuota;
                        ImpuestoCompartido.bandera=1;
                        ImpuestoCompartido.idcon=idCon;
                        ImpuestoCompartido.iddes = idDesc;
                        ImpuestoCompartido.codigoBarra= codBarra.getText();
                        impcom.setLocationRelativeTo(null);
                        impcom.setVisible(true); 
                        dispose();  
                    }   
                }
                if(r==1){
                    JOptionPane.showMessageDialog(new JDialog(),"Agregado Correctamente");

                    int num= Integer.parseInt(lblNumClie.getText());
                    String sql23="SELECT * FROM contrato " +
                                 "WHERE `numeroSeguimiento`>"+num+
                                 " ORDER BY numeroSeguimiento LIMIT 1;";
                    ResultSet rs23=null;
                try{
                    PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sql23);
                    rs2=pst2.executeQuery();            
                while(rs2.next()){
                     int numcli=(rs2.getInt("numeroSeguimiento"));
                     lblNumClie.setText(String.valueOf(numcli));
                     lblImporte.setText("");
                     codBarra.setText("");
                     lblPeriodo.setText("");
                }
            }catch (SQLException e) {
                JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Numero Seguimiento"+e.toString());
            }   
                }
                }catch(NumberFormatException ex){

                    JOptionPane.showMessageDialog(new JDialog(),"Inserte un Valor");

                }
    }
    
    private void ingresarEnter(KeyEvent evt){
        GestoresImpuestos gestorImp=new GestoresImpuestos();
            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");     
                String cb = (codBarra.getText());
                int cb2 =0;               
                int tam= 0;
                int Num=0;
                String cb3="";
                String des=lblImp.getText();
                int n=(Integer.parseInt(des.substring(0,(des.indexOf("-")-1))));

                switch(n){
                    case 1://API                    
                        periodo = (codBarra.getText().substring(33, 39));
                        Num=Integer.parseInt(lblNumClie.getText());
                        idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                        if(idCon == 0){
                            JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                        }else{
                            idDesc=1;                  
                            actual = periodo.substring(4,6)+"/"+periodo.substring(2,4)+"/"+"20"+periodo.substring(0,2); 
                            Date fechaFinal=dateFormat.parse(actual);                 
                            datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                            inicio = (datosContrato.getFechaInicio());
                            String fechaInicio = inicio;
                            Date fechaInicial=dateFormat.parse(fechaInicio);
                            canmes = fechas.calcularMesesAFecha(fechaInicial ,fechaFinal );
                            datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes );
                            totalPagar = (datosCuotas.getTotalaPagar());
                            lblPeriodo.setText(actual);
                            cb2 = Integer.parseInt(cb.substring(40,49));                  
                            tam= (String.valueOf(cb2).length());
                            cb3=String.valueOf(cb2);
                            lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));
                            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                cargar(evt);
                            }
                        }
                    break; 

                    case 4: //AGUA


                        periodo = (codBarra.getText().substring(11, 17)); 
                        Num=Integer.parseInt(lblNumClie.getText());
                        idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                        if(idCon == 0){
                            JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                        }else{
                            idDesc=4;
                            String actualAGUA = periodo.substring(0,2)+"/"+periodo.substring(4,6)+"/"+"20"+periodo.substring(2,4); 
                            Date fechaFinalAGUA=dateFormat.parse(actualAGUA);  
                            datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                            inicio = (datosContrato.getFechaInicio());                  
                            String fechaInicioAGUA = inicio;
                            Date fechaInicialAGUA=dateFormat.parse(fechaInicioAGUA);
                            canmes = fechas.calcularMesesAFecha(fechaInicialAGUA ,fechaFinalAGUA );
                            datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes );
                            totalPagar = (datosCuotas.getTotalaPagar());
                            lblPeriodo.setText(actualAGUA);

                            cb2 = Integer.parseInt(cb.substring(18,25));                  
                            tam= (String.valueOf(cb2).length());
                            cb3=String.valueOf(cb2);
                            lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));     
                            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                cargar(evt);
                            }
                            }
                    break; 

                    case 5: // GAS

                        periodo = (codBarra.getText().substring(26, 34)); 
                        Num=Integer.parseInt(lblNumClie.getText());
                        idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                        if(idCon == 0){
                            JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                        }else{

                            idDesc=5;
                            String actualGAS = periodo.substring(0,2)+"/"+periodo.substring(2,4)+"/"+periodo.substring(4,8); 
                            Date fechaFinalGAS=dateFormat.parse(actualGAS);  
                            datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                            inicio = (datosContrato.getFechaInicio());                  
                            String fechaInicioGAS = inicio;
                            Date fechaInicialGAS=dateFormat.parse(fechaInicioGAS);
                            canmes = fechas.calcularMesesAFecha(fechaInicialGAS ,fechaFinalGAS );
                            datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes );
                            totalPagar = (datosCuotas.getTotalaPagar());
                            lblPeriodo.setText(actualGAS);    
                            cb2 = Integer.parseInt(cb.substring(15,26));                  
                            tam= (String.valueOf(cb2).length());
                            cb3=String.valueOf(cb2);
                            lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));      
                            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                cargar(evt);
                            }

                        } 
                    break;

                    case 2: // TASA MUNICIPAL

                        if(lblPeriodo.getText().isEmpty()){
                              lblPeriodo.setEnabled(true);
                              lblVencimiento.setText("dd/mm/aaaa");
                              lblPeriodo.requestFocus();
//                            JOptionPane.showMessageDialog(new JDialog(),"Ingrese fecha de vencimiento");
                        }else{
                            periodo = lblPeriodo.getText();
                            Num=Integer.parseInt(lblNumClie.getText());
                            idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                            if(idCon == 0){
                                JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                            }else{
                                idDesc=2;
                                String actual = periodo; 
                                Date fechaFinal=dateFormat.parse(actual);  
                                datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                                inicio = (datosContrato.getFechaInicio());                  
                                String fechaInicio = inicio;
                                Date fechaInicial=dateFormat.parse(fechaInicio);
                                canmes = fechas.calcularMesesAFecha(fechaInicial ,fechaFinal );
                                datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes);
                                totalPagar = (datosCuotas.getTotalaPagar());
                                lblPeriodo.setText(actual);
                                cb3=cb.substring(16,21);
                                cb2 = Integer.parseInt(cb.substring(16,21));                  
                                tam= (String.valueOf(cb2).length());
                                cb3=String.valueOf(cb2);
                                lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));  
                                codBarra.requestFocus();
                                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                    cargar(evt);
                                }
                            }
                                           
                        } 
                    break;
                    
                    case 11: // VARIOS

                        if(lblPeriodo.getText().isEmpty()){
                              lblPeriodo.setEnabled(true);
                              lblVencimiento.setText("dd/mm/aaaa");
                              lblPeriodo.requestFocus();
//                            JOptionPane.showMessageDialog(new JDialog(),"Ingrese fecha de vencimiento");
                        }else{
                            periodo = lblPeriodo.getText();
                            Num=Integer.parseInt(lblNumClie.getText());
                            idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                            if(idCon == 0){
                                JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                            }else{
                                idDesc=11;
                                String actual = periodo; 
                                Date fechaFinal=dateFormat.parse(actual);  
                                datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                                inicio = (datosContrato.getFechaInicio());                  
                                String fechaInicio = inicio;
                                Date fechaInicial=dateFormat.parse(fechaInicio);
                                canmes = fechas.calcularMesesAFecha(fechaInicial ,fechaFinal );
                                datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes);
                                totalPagar = (datosCuotas.getTotalaPagar());
                                lblPeriodo.setText(actual);
                                cb3=cb.substring(16,21);
                                cb2 = Integer.parseInt(cb.substring(16,21));                  
                                tam= (String.valueOf(cb2).length());
                                cb3=String.valueOf(cb2);
                                lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));  
                                codBarra.requestFocus();
                                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                    cargar(evt);
                                }
                            }                 
                        } 
                    break;


                    case 3: // LUZ

                        periodo = (codBarra.getText().substring(18, 24)); 
                         Num=Integer.parseInt(lblNumClie.getText());
                        idCon=gestorImp.consultaIdPorNumeroSeguimiento(Num);
                        if(idCon == 0){
                            JOptionPane.showMessageDialog(new JDialog(),"No se encontro el Contrato");                   
                        }else{
                            idDesc=3;
                            String actual = periodo.substring(0,2)+"/"+periodo.substring(2,4)+"/"+"20"+periodo.substring(4,6); 
                            Date fechaFinal=dateFormat.parse(actual);  
                            datosContrato=GestoresContrato.consultaDatosContrato(Integer.parseInt(String.valueOf(idCon)));
                            inicio = (datosContrato.getFechaInicio());                  
                            String fechaInicio= inicio;
                            Date fechaInicial=dateFormat.parse(fechaInicio);
                            canmes = fechas.calcularMesesAFecha(fechaInicial ,fechaFinal);
                            datosCuotas = gestorCon.consultarCuotaLiquidacion(idCon,canmes);
                            totalPagar = (datosCuotas.getTotalaPagar());
                            lblPeriodo.setText(actual);

                            cb2 = Integer.parseInt(cb.substring(24,36));                  
                            tam= (String.valueOf(cb2).length());
                            cb3=String.valueOf(cb2);
                            lblImporte.setText(cb3.substring(0,tam-2)+"."+cb3.substring(tam-2,tam));
                            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                cargar(evt);
                            }
                        } 
                    break;                
                }
           

            }catch(NumberFormatException ex){
                JOptionPane.showMessageDialog(new JDialog(),"Inserte un Valor");

               }catch (ParseException ex) {
                Logger.getLogger(ImpuestoCompartido.class.getName()).log(Level.SEVERE, null, ex);
            }

    }
    
    private void codBarraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codBarraKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_codBarraKeyTyped

    private void codBarraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codBarraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codBarraActionPerformed

    private void lblImporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblImporteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblImporteActionPerformed

    private void lblImporteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblImporteKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_lblImporteKeyTyped

    private void lblPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblPeriodoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblPeriodoActionPerformed

    private void lblPeriodoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblPeriodoKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_lblPeriodoKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        int num= Integer.parseInt(lblNumClie.getText());
        String sql2="SELECT * FROM contrato " +
                    "WHERE `numeroSeguimiento`>"+num+
                    " ORDER BY numeroSeguimiento LIMIT 1;";
        ResultSet rs2=null;
        try{
            PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sql2);
            rs2=pst2.executeQuery();            
            while(rs2.next()){
                 int numcli=(rs2.getInt("numeroSeguimiento"));
                 lblNumClie.setText(String.valueOf(numcli));
                 lblImporte.setText("");
                 codBarra.setText("");
                 lblPeriodo.setText("");
            }
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Numero Seguimiento"+e.toString());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased

        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyReleased

    private void codBarraKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codBarraKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_SPACE){
            ingresarEnter(evt);
        }
               if(evt.getKeyCode() == KeyEvent.VK_ENTER){
              ingresarEnter(evt);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_codBarraKeyReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

     int num= Integer.parseInt(lblNumClie.getText());
        String sq3="SELECT * FROM contrato " +
                    "WHERE `numeroSeguimiento`<"+num+
                    " ORDER BY numeroSeguimiento ;";
        ResultSet rs2=null;
        try{
            PreparedStatement pst2=Conexion.getConexionn().prepareStatement(sq3);
            rs2=pst2.executeQuery();            
            while(rs2.next()){
                 int numcli=(rs2.getInt("numeroSeguimiento"));
                 lblNumClie.setText(String.valueOf(numcli));
                 lblImporte.setText("");
                 codBarra.setText("");
                 lblPeriodo.setText("");
            }
        }catch (SQLException e) {
            JOptionPane.showMessageDialog(new JDialog(),"Error al consultar Numero Seguimiento"+e.toString());
        }            // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void lblPeriodoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblPeriodoKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_SPACE){
            ingresarEnter(evt);
        }
               if(evt.getKeyCode() == KeyEvent.VK_ENTER){
              ingresarEnter(evt);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_lblPeriodoKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgregarImpCodigoBarraCorrelativo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgregarImpCodigoBarraCorrelativo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField codBarra;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblCom;
    public static javax.swing.JLabel lblImp;
    private javax.swing.JTextField lblImporte;
    public static javax.swing.JLabel lblNumClie;
    private javax.swing.JTextField lblPeriodo;
    private javax.swing.JLabel lblVencimiento;
    // End of variables declaration//GEN-END:variables

    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Imagenes/Cagliero.png"));
        return retValue;
    }
    private int idImpuesto;
    public static int nroCuota;
    public static Contrato datosContrato;
    private int idCon;
    private String partida;
    private String periodo;
    private int idDesc;
    private int cuota;
    private String inicio;
    public static Cuotas datosCuotas;
    GestoresContrato gestorCon=new GestoresContrato();
    public static double totalPagar;
    private int canmes; 
    private String actual;
    
}

